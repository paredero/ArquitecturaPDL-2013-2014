; INICIO PROGRAMA PRINCIPAL pasQal 
RES 51
MOVE #65535, .SP
MOVE .SP , .IY
SUB  .SP , #15
MOVE .A , .SP
MOVE .IY , /0
;-- Definicion FUNCION/PROCEDIMIENTO 
BR /FIN_L0
L0 :

;-- Definicion FUNCION/PROCEDIMIENTO 
BR /FIN_L2
L2 :

NOP
WRSTR /cadena1
WRINT #-5[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
MOVE #1000 , #0[.IY]
MOVE #L3 , .PC

L3 : 
; Retorno Argumentos REFERENCIA 
MOVE #-4[.IY] , .R5 
MOVE .R5 , .PC 
REF_L2: 
; Retorno Subprograma 
MOVE #0[.IY] , .R9
MOVE #-1[.IY] , .R7
MOVE #-2[.IY] , /1
MOVE .IY , .SP
MOVE .IX , .IY
MOVE #-3[.IY], .IX
MOVE .R7 , .PC
FIN_L2 : 

WRSTR /cadena2
; Escribimos un salto de linea
WRSTR /cadena0
; INICIO ARGUMENTOS FIN
; Cargado argumento Quadruple - [ARGUMENTO 5, 5, null]
; Llamada Funcion Quadruple - [CALL ESCRIBE, 1, _T_0]
MOVE .SP , .IX
MOVE #5 , #-5[.IX]
MOVE /1 , #-2[.IY]
MOVE .IY , /1
MOVE .IY , .IX
MOVE .SP , .IY
SUB .SP , #7
MOVE .A , .SP
MOVE #RET_L4 , #-1[.IY]
MOVE .IX , #-3[.IY]
MOVE #REF_L4 , #-4[.IY]
BR /L2
REF_L4:
BR /REF_L2
RET_L4: 
MOVE .R9 , #-7[.IY]

; Traducir Quadruple - [ASIG Y, _T_0, null]
MOVE #-7[.IY], #-6[.IY]
WRSTR /cadena3
WRINT #-6[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena4
; Escribimos un salto de linea
WRSTR /cadena0
; INICIO ARGUMENTOS FIN
; Cargado argumento Quadruple - [ARGUMENTO X, 5, null]
; Llamada Funcion Quadruple - [CALL ESCRIBE, 1, _T_1]
MOVE .SP , .IX
MOVE #-5[.IY] , #-5[.IX]
MOVE /1 , #-2[.IY]
MOVE .IY , /1
MOVE .IY , .IX
MOVE .SP , .IY
SUB .SP , #7
MOVE .A , .SP
MOVE #RET_L5 , #-1[.IY]
MOVE .IX , #-3[.IY]
MOVE #REF_L5 , #-4[.IY]
BR /L2
REF_L5:
BR /REF_L2
RET_L5: 
MOVE .R9 , #-8[.IY]

; Traducir Quadruple - [ASIG Y, _T_1, null]
MOVE #-8[.IY], #-6[.IY]
SUB #-5[.IY], #1
MOVE .A, #-9[.IY]
; Traducir Quadruple - [ASIG X, _T_2, null]
MOVE #-9[.IY], #-5[.IY]
MOVE #-5[.IY] , #0[.IY]
MOVE #L1 , .PC

L1 : 
; Retorno Argumentos REFERENCIA 
MOVE #-4[.IY] , .R5 
MOVE .R5 , .PC 
REF_L0: 
; Retorno Subprograma 
MOVE #0[.IY] , .R9
MOVE #-1[.IY] , .R7
MOVE #-2[.IY] , /0
MOVE .IY , .SP
MOVE .IX , .IY
MOVE #-3[.IY], .IX
MOVE .R7 , .PC
FIN_L0 : 

;-- Definicion FUNCION/PROCEDIMIENTO 
BR /FIN_L6
L6 :

NOP
WRSTR /cadena5
SUB #-5[.IY], #-6[.IY]
MOVE .A, #-10[.IY]
SUB #-10[.IY], #-7[.IY]
MOVE .A, #-11[.IY]
SUB #-11[.IY], #-8[.IY]
MOVE .A, #-12[.IY]
WRINT #-12[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
MOVE #-8[.IY] , #0[.IY]
MOVE #L7 , .PC

L7 : 
; Retorno Argumentos REFERENCIA 
MOVE #-4[.IY] , .R5 
MOVE .R5 , .PC 
REF_L6: 
; Retorno Subprograma 
MOVE #0[.IY] , .R9
MOVE #-1[.IY] , .R7
MOVE #-2[.IY] , /0
MOVE .IY , .SP
MOVE .IX , .IY
MOVE #-3[.IY], .IX
MOVE .R7 , .PC
FIN_L6 : 

;-- Definicion FUNCION/PROCEDIMIENTO 
BR /FIN_L8
L8 :

NOP
MOVE #1 , #0[.IY]
MOVE #L9 , .PC

L9 : 
; Retorno Argumentos REFERENCIA 
MOVE #-4[.IY] , .R5 
MOVE .R5 , .PC 
REF_L8: 
; Retorno Subprograma 
MOVE #0[.IY] , .R9
MOVE #-1[.IY] , .R7
MOVE #-2[.IY] , /0
MOVE .IY , .SP
MOVE .IX , .IY
MOVE #-3[.IY], .IX
MOVE .R7 , .PC
FIN_L8 : 

; Escribimos un salto de linea
WRSTR /cadena0
; Escribimos un salto de linea
WRSTR /cadena0
; Traducir Quadruple - [ASIG A, 10, null]
MOVE #10, #-5[.IY]
; INICIO ARGUMENTOS FIN
; Cargado argumento Quadruple - [ARGUMENTO A, 5, null]
; Llamada Funcion Quadruple - [CALL INCREMENTA, 0, _T_0]
MOVE .SP , .IX
MOVE #-5[.IY] , #-5[.IX]
MOVE /0 , #-2[.IY]
MOVE .IY , /0
MOVE .IY , .IX
MOVE .SP , .IY
SUB .SP , #10
MOVE .A , .SP
MOVE #RET_L10 , #-1[.IY]
MOVE .IX , #-3[.IY]
MOVE #REF_L10 , #-4[.IY]
BR /L0
REF_L10:
BR /REF_L0
RET_L10: 
MOVE .R9 , #-10[.IY]

; Traducir Quadruple - [ASIG B, _T_0, null]
MOVE #-10[.IY], #-6[.IY]
WRSTR /cadena6
WRINT #-6[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena7
WRINT #-5[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
; INICIO ARGUMENTOS FIN
; Cargado argumento Quadruple - [ARGUMENTO 10, 5, null]
; Llamada Funcion Quadruple - [CALL BOOL, 0, _T_1]
MOVE .SP , .IX
MOVE #10 , #-5[.IX]
MOVE /0 , #-2[.IY]
MOVE .IY , /0
MOVE .IY , .IX
MOVE .SP , .IY
SUB .SP , #6
MOVE .A , .SP
MOVE #RET_L11 , #-1[.IY]
MOVE .IX , #-3[.IY]
MOVE #REF_L11 , #-4[.IY]
BR /L8
REF_L11:
BR /REF_L8
RET_L11: 
MOVE .R9 , #-11[.IY]

; Traducir Quadruple - [CMP 1, 0, null]
CMP #1, #0
; Salto si cero a etiqueta __L12
BZ /L12
; Traducir Quadruple - [CMP 1, _T_1, null]
CMP #1, #-11[.IY]
; Salto si cero a etiqueta __L12
BZ /L12
; Traducir Quadruple - [ASIG _T_2, 0, null]
MOVE #0, #-12[.IY]
BR /L13
; Etiqueta de salto __L12
L12 :
; Traducir Quadruple - [ASIG _T_2, 1, null]
MOVE #1, #-12[.IY]
; Etiqueta de salto __L13
L13 :
; Traducir Quadruple - [ASIG X, _T_2, null]
MOVE #-12[.IY], #-7[.IY]
; Traducir Quadruple - [CMP X, 1, null]
CMP #-7[.IY], #1
; Salto si no cero a etiqueta __L14
BNZ /L14
WRSTR /cadena8
; Escribimos un salto de linea
WRSTR /cadena0
; Etiqueta de salto __L14
L14 :
NOP
; INICIO ARGUMENTOS FIN
; Cargado argumento Quadruple - [ARGUMENTO 1, 5, null]
; Cargado argumento Quadruple - [ARGUMENTO 2, 6, null]
; Cargado argumento Quadruple - [ARGUMENTO 3, 7, null]
; Cargado argumento Quadruple - [ARGUMENTO 4, 8, null]
; Llamada Funcion Quadruple - [CALL RESTA, 0, _T_3]
MOVE .SP , .IX
MOVE #1 , #-5[.IX]
MOVE #2 , #-6[.IX]
MOVE #3 , #-7[.IX]
MOVE #4 , #-8[.IX]
MOVE /0 , #-2[.IY]
MOVE .IY , /0
MOVE .IY , .IX
MOVE .SP , .IY
SUB .SP , #13
MOVE .A , .SP
MOVE #RET_L15 , #-1[.IY]
MOVE .IX , #-3[.IY]
MOVE #REF_L15 , #-4[.IY]
BR /L6
REF_L15:
BR /REF_L6
RET_L15: 
MOVE .R9 , #-13[.IY]

SUB #-13[.IY], #7
MOVE .A, #-14[.IY]
; Traducir Quadruple - [ASIG A, _T_4, null]
MOVE #-14[.IY], #-5[.IY]
WRSTR /cadena9
WRINT #-5[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
; Escribimos un salto de linea
WRSTR /cadena0
HALT 

; Inicio Cadenas de Texto

cadena0:  DATA "\n"
cadena1:  DATA "PASO POR LA FUNCION ESCRIBE.IMPRIME (PARAMETRO): "
cadena2:  DATA "PRIMERA LLAMADA A ESCRIBE CON X=5."
cadena3:  DATA "IMPRIME EL VALOR DEVUELTO DE ESCRIBE (1000): "
cadena4:  DATA "SEGUNDA LLAMADA A ESCRIBE CON X=PARAMETRO DE INCREMENTA."
cadena5:  DATA "WRITE QUE ESCRIBE UNA EXPRESION WRITE(A-B-C-D) (-8): "
cadena6:  DATA "LLAMADA A INCREMENTA CON 10 (POR VALOR) DEBE DEVOLVER(9): "
cadena7:  DATA "Y LA VARIABLE DEBE CONTINUAR CON EL VALOR ORIGINAL (10): "
cadena8:  DATA "IMPRIME SI UNA FUNCION HA DEVUELTO BIEN UN BOOLEAN."
cadena9:  DATA "IMPRIME EL VALOR DEVUELTO POR POR UNA FUNCION (-3): "
