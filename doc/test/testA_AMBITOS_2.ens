; INICIO PROGRAMA PRINCIPAL pasQal 
RES 51
MOVE #65535, .SP
MOVE .SP , .IY
SUB  .SP , #6
MOVE .A , .SP
MOVE .IY , /0
;-- Definicion FUNCION/PROCEDIMIENTO 
BR /FIN_L0
L0 :

;-- Definicion FUNCION/PROCEDIMIENTO 
BR /FIN_L2
L2 :

;-- Definicion FUNCION/PROCEDIMIENTO 
BR /FIN_L4
L4 :

NOP
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena1
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena2
WRINT #-5[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena3
WRINT #-6[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena4
WRINT #-7[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
ADD #-5[.IY], #-6[.IY]
MOVE .A, #-8[.IY]
; Traducir Quadruple - [ASIG C, _T_0, null]
MOVE #-8[.IY], #-7[.IY]
L5 : 
; Retorno Argumentos REFERENCIA 
MOVE #-4[.IY] , .R5 
MOVE .R5 , .PC 
REF_L4: 
; Retorno Subprograma 
MOVE #0[.IY] , .R9
MOVE #-1[.IY] , .R7
MOVE #-2[.IY] , /2
MOVE .IY , .SP
MOVE .IX , .IY
MOVE #-3[.IY], .IX
MOVE .R7 , .PC
FIN_L4 : 

;-- Definicion FUNCION/PROCEDIMIENTO 
BR /FIN_L6
L6 :

NOP
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena5
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena6
MOVE /1 , .R1 
SUB .R1 , #6
MOVE [.A] , .R2 
WRINT .R2
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena7
MOVE /2 , .R1 
SUB .R1 , #5
MOVE [.A] , .R2 
WRINT .R2
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena8
MOVE /1 , .R1 
SUB .R1 , #5
MOVE [.A] , .R2 
WRINT .R2
; Escribimos un salto de linea
WRSTR /cadena0
; INICIO ARGUMENTOS FIN
; Cargado argumento REFERENCIA Quadruple - [ARGUMENTO_REF Y, 5, null]
; Cargado argumento REFERENCIA Quadruple - [ARGUMENTO_REF Z, 6, null]
; Cargado argumento REFERENCIA Quadruple - [ARGUMENTO_REF X, 7, null]
; Llamada Funcion Quadruple - [CALL HIJO1, 2, 0]
MOVE .SP , .IX
MOVE /1 , .R1 
SUB .R1 , #6
MOVE [.A] , #-5[.IX] 

MOVE /2 , .R1 
SUB .R1 , #5
MOVE [.A] , #-6[.IX] 

MOVE /1 , .R1 
SUB .R1 , #5
MOVE [.A] , #-7[.IX] 

MOVE /2 , #-2[.IY]
MOVE .IY , /2
MOVE .IY , .IX
MOVE .SP , .IY
SUB .SP , #9
MOVE .A , .SP
MOVE #RET_L8 , #-1[.IY]
MOVE .IX , #-3[.IY]
MOVE #REF_L8 , #-4[.IY]
BR /L4
REF_L8:
MOVE /1 , .R1 
SUB .R1 , #6
MOVE #-5[.IY] , [.A]
MOVE /2 , .R1 
SUB .R1 , #5
MOVE #-6[.IY] , [.A]
MOVE /1 , .R1 
SUB .R1 , #5
MOVE #-7[.IY] , [.A]
BR /REF_L4
RET_L8: 
NOP 

WRSTR /cadena9
MOVE /1 , .R1 
SUB .R1 , #5
MOVE [.A] , .R2 
WRINT .R2
L7 : 
; Retorno Argumentos REFERENCIA 
MOVE #-4[.IY] , .R5 
MOVE .R5 , .PC 
REF_L6: 
; Retorno Subprograma 
MOVE #0[.IY] , .R9
MOVE #-1[.IY] , .R7
MOVE #-2[.IY] , /2
MOVE .IY , .SP
MOVE .IX , .IY
MOVE #-3[.IY], .IX
MOVE .R7 , .PC
FIN_L6 : 

; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena10
WRINT #-5[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena11
; INICIO ARGUMENTOS FIN
; Llamada Funcion Quadruple - [CALL HIJO2, 2, 0]
MOVE .SP , .IX
MOVE /2 , #-2[.IY]
MOVE .IY , /2
MOVE .IY , .IX
MOVE .SP , .IY
SUB .SP , #5
MOVE .A , .SP
MOVE #RET_L9 , #-1[.IY]
MOVE .IX , #-3[.IY]
MOVE #REF_L9 , #-4[.IY]
BR /L6
REF_L9:
BR /REF_L6
RET_L9: 
NOP 

; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena12
L3 : 
; Retorno Argumentos REFERENCIA 
MOVE #-4[.IY] , .R5 
MOVE .R5 , .PC 
REF_L2: 
; Retorno Subprograma 
MOVE #0[.IY] , .R9
MOVE #-1[.IY] , .R7
MOVE #-2[.IY] , /1
MOVE .IY , .SP
MOVE .IX , .IY
MOVE #-3[.IY], .IX
MOVE .R7 , .PC
FIN_L2 : 

; Traducir Quadruple - [ASIG Y, 15, null]
MOVE #15, #-6[.IY]
; Traducir Quadruple - [ASIG T, 7, null]
MOVE #7, #-7[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena13
WRINT #-7[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
; INICIO ARGUMENTOS FIN
; Cargado argumento REFERENCIA Quadruple - [ARGUMENTO_REF T, 5, null]
; Llamada Funcion Quadruple - [CALL PADRE, 1, 0]
MOVE .SP , .IX
MOVE #-7[.IY] , #-5[.IX]
MOVE /1 , #-2[.IY]
MOVE .IY , /1
MOVE .IY , .IX
MOVE .SP , .IY
SUB .SP , #6
MOVE .A , .SP
MOVE #RET_L10 , #-1[.IY]
MOVE .IX , #-3[.IY]
MOVE #REF_L10 , #-4[.IY]
BR /L2
REF_L10:
MOVE #-5[.IY] , #-7[.IX]
BR /REF_L2
RET_L10: 
NOP 

; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena14
WRINT #-7[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
L1 : 
; Retorno Argumentos REFERENCIA 
MOVE #-4[.IY] , .R5 
MOVE .R5 , .PC 
REF_L0: 
; Retorno Subprograma 
MOVE #0[.IY] , .R9
MOVE #-1[.IY] , .R7
MOVE #-2[.IY] , /0
MOVE .IY , .SP
MOVE .IX , .IY
MOVE #-3[.IY], .IX
MOVE .R7 , .PC
FIN_L0 : 

; INICIO ARGUMENTOS FIN
; Cargado argumento REFERENCIA Quadruple - [ARGUMENTO_REF GLOBAL, 5, null]
; Llamada Funcion Quadruple - [CALL ABUELO, 0, 0]
MOVE .SP , .IX
MOVE #-5[.IY] , #-5[.IX]
MOVE /0 , #-2[.IY]
MOVE .IY , /0
MOVE .IY , .IX
MOVE .SP , .IY
SUB .SP , #8
MOVE .A , .SP
MOVE #RET_L11 , #-1[.IY]
MOVE .IX , #-3[.IY]
MOVE #REF_L11 , #-4[.IY]
BR /L0
REF_L11:
MOVE #-5[.IY] , #-5[.IX]
BR /REF_L0
RET_L11: 
NOP 

WRSTR /cadena15
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena16
WRINT #-5[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
HALT 

; Inicio Cadenas de Texto

cadena0:  DATA "\n"
cadena1:  DATA "EJECUTANDO HIJO1 QUE MODIFICA X CON VALOR (15)"
cadena2:  DATA "           HIJO1 PARAMETRO X: "
cadena3:  DATA "           HIJO1 PARAMETRO Y: "
cadena4:  DATA "           HIJO1 PARAMETRO C: "
cadena5:  DATA "LLAMADA A HIJO1 CON PARAMETRO (Y Z X)"
cadena6:  DATA "Y = "
cadena7:  DATA "Z = "
cadena8:  DATA "X = "
cadena9:  DATA "VALOR DE X DESPUES DE EJECUTAR HIJO1:"
cadena10:  DATA "PARAMETRO DEL PADRE Z: "
cadena11:  DATA "--- LLAMADA A HIJO2 SIN PARAMETROS"
cadena12:  DATA "--- FIN LLAMADA A HIJO2 SIN PARAMETROS"
cadena13:  DATA "LLAMADA A PADRE CON PARAMETRO (T=7): "
cadena14:  DATA "-- FIN LLAMADA A PADRE CON PARAMETRO (T=7): "
cadena15:  DATA "RESULTADO ESPERADO: 22"
cadena16:  DATA "RESULTADO OBTENIDO: "
