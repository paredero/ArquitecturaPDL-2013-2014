; INICIO PROGRAMA PRINCIPAL pasQal 
RES 11
MOVE #65535, .SP
MOVE .SP , .IY
SUB  .SP , #25
MOVE .A , .SP
MOVE .IY , /0
NOP
; Traducir Quadruple - [ASIG A, 12, null]
MOVE #12, #-5[.IY]
; Traducir Quadruple - [ASIG B, 10, null]
MOVE #10, #-6[.IY]
WRSTR /cadena1
ADD #-5[.IY], #-6[.IY]
MOVE .A, #-9[.IY]
; Traducir Quadruple - [ASIG C, _T_0, null]
MOVE #-9[.IY], #-7[.IY]
WRINT #-7[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena2
SUB #-5[.IY], #-6[.IY]
MOVE .A, #-10[.IY]
; Traducir Quadruple - [ASIG C, _T_1, null]
MOVE #-10[.IY], #-7[.IY]
WRINT #-7[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
ADD #-7[.IY], #-5[.IY]
MOVE .A, #-11[.IY]
ADD #-11[.IY], #100
MOVE .A, #-12[.IY]
SUB #-12[.IY], #-6[.IY]
MOVE .A, #-13[.IY]
; Traducir Quadruple - [ASIG C, _T_4, null]
MOVE #-13[.IY], #-7[.IY]
WRSTR /cadena3
WRINT #-7[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
; Traducir Quadruple - [ASIG A, 6, null]
MOVE #6, #-5[.IY]
; Traducir Quadruple - [ASIG B, 0, null]
MOVE #0, #-6[.IY]
WRSTR /cadena4
; Escribimos un salto de linea
WRSTR /cadena0
; Etiqueta de salto __L2
L2 :
ADD #-6[.IY], #1
MOVE .A, #-14[.IY]
; Traducir Quadruple - [ASIG B, _T_5, null]
MOVE #-14[.IY], #-6[.IY]
WRSTR /cadena5
WRINT #-6[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
ADD #4, #3
MOVE .A, #-15[.IY]
; Traducir Quadruple - [CMP B, _T_6, null]
CMP #-6[.IY], #-15[.IY]
; Salto si cero a etiqueta __L0
BZ /L0
; Traducir Quadruple - [ASIG _T_7, 0, null]
MOVE #0, #-16[.IY]
BR /L1
; Etiqueta de salto __L0
L0 :
; Traducir Quadruple - [ASIG _T_7, 1, null]
MOVE #1, #-16[.IY]
; Etiqueta de salto __L1
L1 :
; Traducir Quadruple - [CMP _T_7, 0, null]
CMP #-16[.IY], #0
; Salto si no cero a etiqueta __L3
BNZ /L3
BR /L2
; Etiqueta de salto __L3
L3 :
; Traducir Quadruple - [ASIG A, 10, null]
MOVE #10, #-5[.IY]
; Traducir Quadruple - [ASIG B, 20, null]
MOVE #20, #-6[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena6
WRINT #30
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena7
WRINT #-5[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena8
SUB #-6[.IY], #-5[.IY]
MOVE .A, #-18[.IY]
; Traducir Quadruple - [ASIG A, _T_9, null]
MOVE #-18[.IY], #-5[.IY]
WRINT #-5[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena9
SUB #100, #50
MOVE .A, #-19[.IY]
SUB #-19[.IY], #30
MOVE .A, #-20[.IY]
SUB #-20[.IY], #10
MOVE .A, #-21[.IY]
; Traducir Quadruple - [ASIG A, _T_12, null]
MOVE #-21[.IY], #-5[.IY]
WRINT #-5[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
; Traducir Quadruple - [ASIG A, 100, null]
MOVE #100, #-5[.IY]
; Traducir Quadruple - [ASIG B, 50, null]
MOVE #50, #-6[.IY]
; Traducir Quadruple - [CMP B, A, null]
CMP #-6[.IY], #-5[.IY]
; Salto si negativo __L4
BN /L4
; Traducir Quadruple - [ASIG _T_13, 0, null]
MOVE #0, #-22[.IY]
BR /L5
; Etiqueta de salto __L4
L4 :
; Traducir Quadruple - [ASIG _T_13, 1, null]
MOVE #1, #-22[.IY]
; Etiqueta de salto __L5
L5 :
; Traducir Quadruple - [CMP _T_13, 1, null]
CMP #-22[.IY], #1
; Salto si no cero a etiqueta __L10
BNZ /L10
WRSTR /cadena10
WRINT #-5[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
BR /L9
; Etiqueta de salto __L10
L10 :
WRSTR /cadena11
WRINT #-5[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
; Traducir Quadruple - [CMP A, 100, null]
CMP #-5[.IY], #100
; Salto si cero a etiqueta __L6
BZ /L6
; Traducir Quadruple - [ASIG _T_14, 0, null]
MOVE #0, #-23[.IY]
BR /L7
; Etiqueta de salto __L6
L6 :
; Traducir Quadruple - [ASIG _T_14, 1, null]
MOVE #1, #-23[.IY]
; Etiqueta de salto __L7
L7 :
; Traducir Quadruple - [CMP _T_14, 1, null]
CMP #-23[.IY], #1
; Salto si no cero a etiqueta __L8
BNZ /L8
WRSTR /cadena12
; Etiqueta de salto __L8
L8 :
NOP
; Etiqueta de salto __L9
L9 :
NOP
; Escribimos un salto de linea
WRSTR /cadena0
; Traducir Quadruple - [ASIG A, 5, null]
MOVE #5, #-5[.IY]
WRSTR /cadena13
; Escribimos un salto de linea
WRSTR /cadena0
; Traducir Quadruple - [ASIG B, 1, null]
MOVE #1, #-6[.IY]
; Traducir Quadruple - [ASIG _T_15, A, null]
MOVE #-5[.IY], #-24[.IY]
; Etiqueta de salto __L11
L11 :
; Traducir Quadruple - [CMP _T_15, B, null]
CMP #-24[.IY], #-6[.IY]
; Salto si negativo __L12
BN /L12
WRINT #-6[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
INC #-6[.IY]
BR /L11
; Etiqueta de salto __L12
L12 :
HALT 

; Inicio Cadenas de Texto

cadena0:  DATA "\n"
cadena1:  DATA "EL RESULTADO DEBE SER 22: "
cadena2:  DATA "EL RESULTADO DEBE SER 2: "
cadena3:  DATA "EL RESULTADO DEBE SER 104: "
cadena4:  DATA "REPETIR HASTA B SEA 7"
cadena5:  DATA "RESULTADO DEL BUCLE"
cadena6:  DATA "ESCRIBE NUMERO (30): "
cadena7:  DATA "VARIABLE A(10): "
cadena8:  DATA "RESTA 20 - 10= (10): "
cadena9:  DATA "RESTA 100-50-30-10 = (10): "
cadena10:  DATA "A ES > 10: "
cadena11:  DATA "EL VALOR DE A ES: "
cadena12:  DATA "A VALE 100"
cadena13:  DATA "EMPIEZO EL BUCLE FOR"
