; INICIO PROGRAMA PRINCIPAL pasQal 
RES 21
MOVE #65535, .SP
MOVE .SP , .IY
SUB  .SP , #7
MOVE .A , .SP
MOVE .IY , /0
;-- Definicion FUNCION/PROCEDIMIENTO 
BR /FIN_L0
L0 :

NOP
; Traducir Quadruple - [CMP N, 1, null]
CMP #-5[.IY], #1
; Salto si negativo __L2
BN /L2
; Traducir Quadruple - [ASIG _T_0, 0, null]
MOVE #0, #-7[.IY]
BR /L3
; Etiqueta de salto __L2
L2 :
; Traducir Quadruple - [ASIG _T_0, 1, null]
MOVE #1, #-7[.IY]
; Etiqueta de salto __L3
L3 :
; Traducir Quadruple - [CMP _T_0, 1, null]
CMP #-7[.IY], #1
; Salto si no cero a etiqueta __L6
BNZ /L6
MOVE #1 , #0[.IY]
MOVE #L1 , .PC

BR /L5
; Etiqueta de salto __L6
L6 :
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena1
WRINT #-5[.IY]
; INICIO ARGUMENTOS FIN
SUB #-5[.IY], #1
MOVE .A, #-8[.IY]
; Cargado argumento Quadruple - [ARGUMENTO _T_1, 5, null]
; Llamada Funcion Quadruple - [CALL FACT, 0, _T_2]
MOVE .SP , .IX
MOVE #-8[.IY] , #-5[.IX]
MOVE /0 , #-2[.IY]
MOVE .IY , /0
MOVE .IY , .IX
MOVE .SP , .IY
SUB .SP , #10
MOVE .A , .SP
MOVE #RET_L4 , #-1[.IY]
MOVE .IX , #-3[.IY]
MOVE #REF_L4 , #-4[.IY]
BR /L0
REF_L4:
BR /REF_L0
RET_L4: 
MOVE .R9 , #-9[.IY]

MOVE #-9[.IY] , #0[.IY]
MOVE #L1 , .PC

; Etiqueta de salto __L5
L5 :
NOP
L1 : 
; Retorno Argumentos REFERENCIA 
MOVE #-4[.IY] , .R5 
MOVE .R5 , .PC 
REF_L0: 
; Retorno Subprograma 
MOVE #0[.IY] , .R9
MOVE #-1[.IY] , .R7
MOVE #-2[.IY] , /0
MOVE .IY , .SP
MOVE .IX , .IY
MOVE #-3[.IY], .IX
MOVE .R7 , .PC
FIN_L0 : 

; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena2
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena3
; Escribimos un salto de linea
WRSTR /cadena0
; INICIO ARGUMENTOS FIN
; Cargado argumento Quadruple - [ARGUMENTO 5, 5, null]
; Llamada Funcion Quadruple - [CALL FACT, 0, _T_0]
MOVE .SP , .IX
MOVE #5 , #-5[.IX]
MOVE /0 , #-2[.IY]
MOVE .IY , /0
MOVE .IY , .IX
MOVE .SP , .IY
SUB .SP , #10
MOVE .A , .SP
MOVE #RET_L7 , #-1[.IY]
MOVE .IX , #-3[.IY]
MOVE #REF_L7 , #-4[.IY]
BR /L0
REF_L7:
BR /REF_L0
RET_L7: 
MOVE .R9 , #-6[.IY]

; Traducir Quadruple - [ASIG A, _T_0, null]
MOVE #-6[.IY], #-5[.IY]
; Escribimos un salto de linea
WRSTR /cadena0
WRSTR /cadena4
WRINT #-5[.IY]
HALT 

; Inicio Cadenas de Texto

cadena0:  DATA "\n"
cadena1:  DATA "LLAMADA A FACT DESDE FACT N = "
cadena2:  DATA "NUEVA EJECUCION----"
cadena3:  DATA "LLAMADA DESDE EL PRINCIPAL."
cadena4:  DATA "RESULTADO DE FACT(5)(DEBE DEVOLVER 1)= "
